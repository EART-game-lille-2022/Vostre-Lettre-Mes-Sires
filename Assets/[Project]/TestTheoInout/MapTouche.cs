//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/[Project]/TestTheoInout/MapTouche.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapTouche: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapTouche()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapTouche"",
    ""maps"": [
        {
            ""name"": ""Controles"",
            ""id"": ""4f07ce60-ec7f-4395-8179-d826bdc42e11"",
            ""actions"": [
                {
                    ""name"": ""ToucheOnce"",
                    ""type"": ""Button"",
                    ""id"": ""9b2e62f8-4a6e-4255-9ccc-a4cf2c88cc22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickMovement"",
                    ""type"": ""Value"",
                    ""id"": ""65ef777c-8a27-4ca4-a731-297b23985c26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9a828ca3-e37e-4cb1-be16-366d2143c22c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToucheOnce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b873b550-e88e-4aba-9625-88f4b7b80e91"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9362478b-3b5f-4ac2-b1ac-38ed41a62f1b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5498a3ad-7a8b-48c3-9ec6-52e65fd7bf02"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1829f67d-8d53-447d-bdcb-a37669c6eb09"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e1edc5fc-8061-4481-8bfe-45fb40c1abfc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controles
        m_Controles = asset.FindActionMap("Controles", throwIfNotFound: true);
        m_Controles_ToucheOnce = m_Controles.FindAction("ToucheOnce", throwIfNotFound: true);
        m_Controles_JoystickMovement = m_Controles.FindAction("JoystickMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controles
    private readonly InputActionMap m_Controles;
    private List<IControlesActions> m_ControlesActionsCallbackInterfaces = new List<IControlesActions>();
    private readonly InputAction m_Controles_ToucheOnce;
    private readonly InputAction m_Controles_JoystickMovement;
    public struct ControlesActions
    {
        private @MapTouche m_Wrapper;
        public ControlesActions(@MapTouche wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToucheOnce => m_Wrapper.m_Controles_ToucheOnce;
        public InputAction @JoystickMovement => m_Wrapper.m_Controles_JoystickMovement;
        public InputActionMap Get() { return m_Wrapper.m_Controles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesActions set) { return set.Get(); }
        public void AddCallbacks(IControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Add(instance);
            @ToucheOnce.started += instance.OnToucheOnce;
            @ToucheOnce.performed += instance.OnToucheOnce;
            @ToucheOnce.canceled += instance.OnToucheOnce;
            @JoystickMovement.started += instance.OnJoystickMovement;
            @JoystickMovement.performed += instance.OnJoystickMovement;
            @JoystickMovement.canceled += instance.OnJoystickMovement;
        }

        private void UnregisterCallbacks(IControlesActions instance)
        {
            @ToucheOnce.started -= instance.OnToucheOnce;
            @ToucheOnce.performed -= instance.OnToucheOnce;
            @ToucheOnce.canceled -= instance.OnToucheOnce;
            @JoystickMovement.started -= instance.OnJoystickMovement;
            @JoystickMovement.performed -= instance.OnJoystickMovement;
            @JoystickMovement.canceled -= instance.OnJoystickMovement;
        }

        public void RemoveCallbacks(IControlesActions instance)
        {
            if (m_Wrapper.m_ControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesActions @Controles => new ControlesActions(this);
    public interface IControlesActions
    {
        void OnToucheOnce(InputAction.CallbackContext context);
        void OnJoystickMovement(InputAction.CallbackContext context);
    }
}
